"""
This script defines a Modal application that serves as a demo for a Stable Diffusion-based image generation pipeline.
The application leverages Modal's infrastructure to manage GPU resources, run scheduled tasks, and provide REST API 
endpoints for generating images and checking the application's health status.

Modules:
    - modal: For managing the Modal app, image builds, and functions.
    - io: For handling in-memory image storage.
    - fastapi: For building REST API endpoints.
    - datetime: For generating timestamps in UTC.
    - requests: For making HTTP requests.
    - os: For accessing environment variables.

Classes:
    - Model: Contains methods to load model weights and handle web endpoints for image generation and health checks.

Functions:
    - download_model: Downloads and prepares the necessary model during the image build process.
    - keep_warm: Periodically pings the app's endpoints to ensure they remain responsive.
"""

import modal
import io
from fastapi import Response, HTTPException, Query, Request
from datetime import datetime, timezone
import requests
import os


def download_model():
    """
    Downloads the FLUX pipeline model using the `diffusers` library during the image build process.

    This function is used to pre-download and cache the necessary model components for image generation.
    """
    from diffusers import FluxPipeline
    import torch

    FluxPipeline.from_pretrained(
        "black-forest-labs/FLUX.1-schnell",
        torch_dtype=torch.bfloat16
    )


# Define the Modal image with dependencies and the download_model function.
image = (modal.Image.debian_slim()
         .pip_install("fastapi[standard]", "diffusers", "transformers", "accelerate", "requests", "sentencepiece")
         .run_function(download_model))

# Define the Modal application.
app = modal.App("sd-demo_1", image=image)


@app.cls(image=image, gpu="A100", container_idle_timeout=300, secrets=[modal.Secret.from_name("custom-secret")])
class Model:
    """
    Defines the main model class for the application, which handles image generation and health-check endpoints.

    Attributes:
        pipe (FluxPipeline): The pipeline object for image generation.
        API_KEY (str): API key for authentication.
    """

    @modal.build()
    @modal.enter()
    def load_weights(self):
        """
        Loads the model weights and initializes the FLUX pipeline with CPU offloading enabled.
        """
        from diffusers import FluxPipeline
        import torch

        self.pipe = FluxPipeline.from_pretrained(
            "black-forest-labs/FLUX.1-schnell",
            torch_dtype=torch.bfloat16
        )

        self.pipe.enable_model_cpu_offload()
        self.API_KEY = os.environ["API_KEY"]

    @modal.web_endpoint()
    def generate(self, request: Request, prompt: str = Query(..., description="The prompt for image generation")):
        """
        Generates an image based on the given prompt and returns it as a JPEG response.

        Args:
            request (Request): The FastAPI request object containing headers.
            prompt (str): The prompt text for the image generation model.

        Returns:
            Response: A JPEG image generated by the FLUX pipeline.

        Raises:
            HTTPException: If the provided API key is invalid.
        """
        import torch

        api_key = request.headers.get("SERVER-API-Key")
        if api_key != self.API_KEY:
            raise HTTPException(
                status_code=401,
                detail="Unauthorized"
            )

        image = self.pipe(
            prompt,
            guidance_scale=0.0,
            num_inference_steps=4,
            max_sequence_length=256,
            generator=torch.Generator("cpu").manual_seed(0)
        ).images[0]

        buffer = io.BytesIO()
        image.save(buffer, format="JPEG")
        return Response(content=buffer.getvalue(), media_type="image/jpeg")

    @modal.web_endpoint()
    def health(self):
        """
        Provides a health status endpoint for the application.

        Returns:
            dict: A dictionary containing the application's health status and a UTC timestamp.
        """
        return {"status": "healthy", "timestamp": datetime.now(timezone.utc).isoformat()}


@app.function(
    schedule=modal.Cron("*/5 * * * *"),
    secrets=[modal.Secret.from_name("custom-secret")],
)
def keep_warm():
    """
    A scheduled function that pings the app's endpoints every 5 minutes to keep them warm and responsive.

    This function performs:
        1. A health check on the health endpoint.
        2. A test request to the generate endpoint using the API key.
    """
    health_url = "https://tituz175--sd-demo-1-model-health.modal.run"
    generate_url = "https://tituz175--sd-demo-1-model-generate.modal.run"

    # First check health endpoint (no API key needed)
    health_response = requests.get(health_url)
    print(f"Health check at: {health_response.json()['timestamp']}")

    # Then make a test request to the generate endpoint with API key
    headers = {"X-API-KEY": os.environ["API_KEY"]}
    generate_response = requests.get(generate_url, headers=headers)
    print(f"Generate endpoint tested successfully at: {datetime.now(timezone.utc).isoformat()}")
